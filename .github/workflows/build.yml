name: Build and Release AWS Lambda Layer for PyODBC

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        msodbc_version: ["17"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for AWS Lambda layer
        run: |
          docker build \
            --build-arg PYTHON_VERSIONS="3.12" \
            --build-arg MSODBC_VERSION=${{ matrix.msodbc_version }} \
            --build-arg UNIXODBC_VERSION=${{ matrix.unixodbc_version }} \
            -t pyodbc-lambda-layer:multi-python .

      - name: Create Container and Copy Artifacts
        run: |
          CONTAINER_ID=$(docker create pyodbc-lambda-layer:multi-python)
          docker cp $CONTAINER_ID:/opt/artifacts/. .
          docker rm $CONTAINER_ID

      - name: Upload PyODBC layer zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyodbc-layer-multi-python-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}
          path: pyodbc-layer-*.zip

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          MSSQL_SA_PASSWORD: "yourStrong(!)Password"
    strategy:
      matrix:
        python_version: ["3.12"]
        msodbc_version: ["17"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true

      - name: Unzip Lambda layer
        run: |
          unzip pyodbc-layer/pyodbc-layer-${{ matrix.python_version }}-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}.zip -d pyodbc-layer

      - name: Copy Lambda function into Docker container
        run: |
          cp lambda/lambda_function.py .

      - name: Test Lambda with MSSQL
        run: |
          docker run --rm \
            --network host \
            -v $(pwd)/pyodbc-layer:/opt \
            -v $(pwd)/lambda_function.py:/var/task/lambda_function.py \
            -e MSSQL_SA_PASSWORD="yourStrong(!)Password" \
            -e _HANDLER=lambda_function.lambda_handler \
            public.ecr.aws/lambda/python:${{ matrix.python_version }} \
            aws-lambda-rie python3 /var/runtime/bootstrap

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true
      - run: ls -R pyodbc-layer

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "pyodbc-layer/pyodbc-layer-*.zip"
          generateReleaseNotes: true