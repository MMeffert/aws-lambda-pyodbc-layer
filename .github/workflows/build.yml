name: Build and Release AWS Lambda Layer for PyODBC

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        msodbc_version: ["17"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for AWS Lambda layer
        run: |
          docker build \
            --build-arg PYTHON_VERSIONS="3.12" \
            --build-arg MSODBC_VERSION=${{ matrix.msodbc_version }} \
            --build-arg UNIXODBC_VERSION=${{ matrix.unixodbc_version }} \
            -t pyodbc-lambda-layer:multi-python .

      - name: Create Container and Copy Artifacts
        run: |
          CONTAINER_ID=$(docker create pyodbc-lambda-layer:multi-python)
          docker cp $CONTAINER_ID:/opt/artifacts/. .
          docker rm $CONTAINER_ID

      - name: Upload PyODBC layer zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyodbc-layer-multi-python-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}
          path: pyodbc-layer-*.zip

  test:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        python_version: ["3.12"]
        msodbc_version: ["17"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Docker network
        run: |
          docker network create lambda-network

      - name: Start MSSQL container on the custom network
        run: |
          docker run -d \
            --name mssql \
            --network lambda-network \
            -e ACCEPT_EULA=Y \
            -e MSSQL_SA_PASSWORD="yourStrong(!)Password" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Wait for MSSQL to be ready (Health Check)
        run: |
          for i in {1..30}; do
            docker exec mssql /opt/mssql-tools18/bin/sqlcmd -S mssql -U sa -P "yourStrong(@)Password" -Q "SELECT 1" -N -C > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "MSSQL is ready!"
              break
            fi
            echo "Waiting for MSSQL to be ready..."
            sleep 5
          done

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true

      - name: Unzip Lambda layer
        run: |
          unzip pyodbc-layer/pyodbc-layer-${{ matrix.python_version }}-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}.zip -d pyodbc-layer

      - name: Copy Lambda function into Docker container
        run: |
          cp lambda/lambda_function.py .

      - name: Download and Install AWS Lambda RIE
        run: |
          curl -Lo aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie
          chmod +x aws-lambda-rie
          mv aws-lambda-rie /usr/local/bin/aws-lambda-rie

      - name: Test Lambda with MSSQL
        run: |
          docker run -d \
            --network lambda-network \
            --entrypoint /usr/local/bin/aws-lambda-rie \
            -v $(pwd)/pyodbc-layer:/opt \
            -v $(pwd)/lambda_function.py:/var/task/lambda_function.py \
            -e MSSQL_SA_PASSWORD="yourStrong(@)Password" \
            -p 9000:8080 \
            public.ecr.aws/lambda/python:${{ matrix.python_version }} \
            /var/runtime/bootstrap lambda_function.lambda_handler

          sleep 10

          curl -v -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{"msodbc_version": "${{ matrix.msodbc_version }}"}'

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true
      - run: ls -R pyodbc-layer

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "pyodbc-layer/pyodbc-layer-*.zip"
          generateReleaseNotes: true