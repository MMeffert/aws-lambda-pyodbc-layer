name: Build and Release AWS Lambda Layer for PyODBC

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        msodbc_version: ["17"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for AWS Lambda layer
        run: |
          docker build \
            --build-arg PYTHON_VERSIONS="3.12" \
            --build-arg MSODBC_VERSION=${{ matrix.msodbc_version }} \
            --build-arg UNIXODBC_VERSION=${{ matrix.unixodbc_version }} \
            -t pyodbc-lambda-layer:multi-python .

      - name: Create Container and Copy Artifacts
        run: |
          CONTAINER_ID=$(docker create pyodbc-lambda-layer:multi-python)
          docker cp $CONTAINER_ID:/opt/artifacts/. .
          docker rm $CONTAINER_ID

      - name: Upload PyODBC layer zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyodbc-layer-multi-python-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}
          path: pyodbc-layer-*.zip
          retention-days: 1

  test:
    env:
      MSSQL_SERVER_VERSION: 2022-latest
      MSSQL_SA_PASSWORD: yourStrong(@)Password

    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        python_version: ["3.12"]
        msodbc_version: ["17"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Docker network
        run: |
          docker network create lambda-network

      - name: Start MSSQL container on the custom network
        run: |
          docker run -d \
            --name mssql \
            --network lambda-network \
            -e ACCEPT_EULA=Y \
            -e MSSQL_SA_PASSWORD="${{ env.MSSQL_SA_PASSWORD }}" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:${{ env.MSSQL_SERVER_VERSION }}

      - name: Wait for MSSQL to be ready (Health Check)
        run: |
          chmod +x test/check_mssql.sh
          ./test/check_mssql.sh

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true

      - name: Unzip Lambda layer
        run: |
          unzip pyodbc-layer/pyodbc-layer-${{ matrix.python_version }}-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}.zip -d pyodbc-layer

      - name: Copy Lambda function into Docker container
        run: |
          cp lambda/lambda_function.py .

      - name: Download and Install AWS Lambda RIE
        run: |
          curl -Lo aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie
          chmod +x aws-lambda-rie
          mv aws-lambda-rie /usr/local/bin/aws-lambda-rie

      - name: Test Lambda with MSSQL
        run: |
          docker run -d \
            --network lambda-network \
            --entrypoint /usr/local/bin/aws-lambda-rie \
            -v $(pwd)/pyodbc-layer:/opt \
            -v $(pwd)/lambda_function.py:/var/task/lambda_function.py \
            -e MSSQL_SA_PASSWORD="${{ env.MSSQL_SA_PASSWORD }}" \
            -p 9000:8080 \
            public.ecr.aws/lambda/python:${{ matrix.python_version }} \
            /var/runtime/bootstrap lambda_function.lambda_handler

          sleep 10

          chmod +x test/check_lambda.sh
          ./test/check_lambda.sh ${{ matrix.msodbc_version }}

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true

      - run: ls -R pyodbc-layer

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "pyodbc-layer/pyodbc-layer-*.zip"
          tag: ${{ github.ref_name }}
          generateReleaseNotes: true
          body: |
            # AWS Lambda Layer Release - PyODBC for MSSQL

            We are excited to announce the latest release of AWS Lambda layers for connecting to SQL Server using PyODBC. These layers come pre-configured with the necessary ODBC drivers to enable seamless integration with your AWS Lambda functions.

            ### Available packages for this release:

              - **pyodbc-layer-3.12-mssql18-unixODBC2.3.12.zip**: For Python 3.12 on x86_64 Lambda environments.
              - **pyodbc-layer-3.12-mssql17-unixODBC2.3.12.zip**: For Python 3.12 on x86_64 Lambda environments.

            ### Instructions:
            1. Download the appropriate layer based on your Lambda runtime environment and architecture.
            2. Attach the downloaded layer to your Lambda function using the AWS Management Console or AWS CLI.
            3. Configure your connection settings for MSSQL within your Lambda function.

            These layers provide robust MSSQL Server connectivity, simplifying the process of integrating MSSQL databases into your serverless workflows.

            Thank you for using our AWS Lambda layers. We look forward to supporting your applications and improving your development experience!